---
# tasks file for playbooks/roles/openvpn

- name: Ensure group 'nogroup' is present
  group:
    name: "{{ openvpn_server_service_group }}"
    state: present
    system: yes
  tags:
    - openvpn
    - openvpn.server
    - openvpn.server.nogroup

- name: Enable ipv4 forwarding
  sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    ignoreerrors: yes
  when: openvpn_server_systemctl_ipv4_forvarding_enabled
  tags:
    - openvpn
    - openvpn.server
    - openvpn.server.enable_ipv4.forwarding

#################################### Firewall settings ####################################
- name: Install iptables-services
  yum:
    name: iptables-services
    state: present
  register: iptables_installed
  when: ansible_os_family == "RedHat"
  tags:
    - openvpn
    - openvpn.server
    - openvpn.server.install
    - openvpn.server.install.firewall

- name: Firewall - Allow VPN forwarding
  iptables:
    chain: FORWARD
    source: "{{ openvpn_server_network }}/{{ openvpn_server_netmask_cidr }}"
    jump: ACCEPT
    action: insert
    comment: "Allow VPN forwarding"
  when: openvpn_server_tun_mode
  notify: "save firewall"
  tags:
    - openvpn
    - openvpn.firewall
    - openvpn.firewall.fw

- name: Firewall - Allow incoming SSH connection
  iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "{{ ansible_port | default(22) }}"
    jump: ACCEPT
    action: insert
    comment: "Allow incoming SSH connection"
  when: openvpn_server_tun_mode
  notify: "save firewall"
  tags:
    - openvpn
    - openvpn.firewall
    - openvpn.firewall.fw

- name: Firewall - Allow incoming VPN connection
  iptables:
    chain: INPUT
    protocol: "{{ openvpn_server_proto }}"
    destination_port: "{{ openvpn_server_port | int }}"
    jump: ACCEPT
    action: insert
    comment: "Allow incoming VPN connection"
  when: openvpn_server_tun_mode
  notify: "save firewall"
  tags:
    - openvpn
    - openvpn.firewall
    - openvpn.firewall.fw

- name: Firewall - Accept packets from VPN tunnel adaptor
  iptables:
    chain: INPUT
    in_interface: tun0
    jump: ACCEPT
    action: insert
    comment: "Accept packets from VPN tunnel adaptor"
  when: openvpn_server_tun_mode
  notify: "save firewall"
  tags:
    - openvpn
    - openvpn.firewall
    - openvpn.firewall.fw

- name: Firewall - Perform NAT readdressing
  iptables:
    table: nat
    chain: POSTROUTING
    source: "{{ openvpn_server_network }}/{{ openvpn_server_netmask_cidr }}"
    to_source: "{{ ansible_default_ipv4.address | default(openvpn_server_lan_ip) }}"
    jump: SNAT
    action: insert
    comment: "Perform NAT readdressing"
  when: not openvpn_server_masquerade_not_snat and openvpn_server_tun_mode
  notify: "save firewall"
  tags:
    - openvpn
    - openvpn.firewall
    - openvpn.firewall.fw

- name: Firewall - Perform NAT readdressing with MASQUERADE
  iptables:
    table: nat
    chain: POSTROUTING
    source: "{{ openvpn_server_network }}/{{ openvpn_server_netmask_cidr }}"
    jump: MASQUERADE
    action: insert
    comment: "Perform NAT readdressing"
  when: openvpn_server_masquerade_not_snat and openvpn_server_tun_mode
  notify: "save firewall"
  tags:
    - openvpn
    - openvpn.firewall
    - openvpn.firewall.fw

- name: Save existing Firewall rule before start iptables service
  shell: "{{ iptables_save_command }}"
  when: iptables_installed.changed|bool
  tags:
    - openvpn
    - openvpn.firewall
    - openvpn.firewall.fw
#########################################################################################

- name: Install epel-release
  yum:
    name: epel-release
    state: present
  when: ansible_distribution == "CentOS" or ansible_distribution=="RedHat"
  tags:
    - openvpn
    - openvpn.server
    - openvpn.server.install
    - openvpn.server.install.epel

- name: Install base packages
  yum:
    state: present
    name:
      - git
      - vim
      - openssl
      - telnet
      - wget
      - unzip
      - net-tools
      - bridge-utils
  tags:
    - openvpn
    - openvpn.server
    - openvpn.server.install
    - openvpn.server.install.packages

- name: Install OpenVPN server
  yum:
    name: openvpn
    state: latest
    enablerepo: epel
  tags:
    - openvpn
    - openvpn.server
    - openvpn.server.install

- name: Create OpenVPN key directory
  file:
    path: "{{ openvpn_server_key_dir }}"
    state: directory
  tags:
    - openvpn
    - openvpn.server
    - openvpn.server.dir.key

- name: Copy openssl server/ca extensions
  copy:
    src: "{{ item }}"
    dest: "{{ openvpn_server_key_dir }}"
    owner: "{{ openvpn_server_script_owner }}"
    group: "{{ openvpn_server_script_group }}"
    mode: 0400
  with_items:
    - openssl-ca.ext
    - openssl-server.ext
  tags:
    - openvpn
    - openvpn.ca
    - openvpn.server
    - openvpn.ca.ext
    - openvpn.server.ext
    - openvpn.ca.ext.copy
    - openvpn.server.ext.copy

- name: Copy CA key if exist
  copy:
    content: "{{ openvpn_server_ca_key.key }}"
    dest: "{{ openvpn_server_key_dir }}/ca-key.pem"
    mode: 0400
  when: openvpn_server_ca_key is defined
  tags:
    - openvpn
    - openvpn.ca.key
    - openvpn.ca.server
    - openvpn.ca.server.key
    - openvpn.ca.server.key.copy

- name: Copy CA cert if exist
  copy:
    content: "{{ openvpn_server_ca_key.crt }}"
    dest: "{{ openvpn_server_key_dir }}/ca.crt"
    mode: 0444
  when: openvpn_server_ca_key is defined
  tags:
    - openvpn
    - openvpn.ca.crt
    - openvpn.ca.server
    - openvpn.ca.server.crt
    - openvpn.ca.server.crt.copy

- name: Generate CA key
  command: /usr/bin/openssl req -nodes -newkey rsa:{{ openvpn_server_rsa_bits }} -keyout ca-key.pem -out ca-csr.pem -days {{ openvpn_server_key_days }} -subj /CN=OpenVPN-CA-{{ openvpn_server_hostname }}/
  args:
    chdir: "{{ openvpn_server_key_dir }}"
    creates: ca-key.pem
  when: openvpn_ca_key is not defined
  tags:
    - openvpn
    - openvpn.ca.key
    - openvpn.ca.server
    - openvpn.ca.server.generate
    - openvpn.ca.server.generate.key

- name: Protect CA key if exist
  file:
    path: "{{ openvpn_server_key_dir }}/ca-key.pem"
    mode: 0400
  when: openvpn_server_ca_key is not defined
  tags:
    - openvpn
    - openvpn.ca.key
    - openvpn.ca.server
    - openvpn.ca.server.protect
    - openvpn.ca.server.protect.key

- name: Sign CA key if not exist before
  command: /usr/bin/openssl x509 -req -in ca-csr.pem -out ca.crt -CAcreateserial -signkey ca-key.pem -sha256 -days {{ openvpn_server_key_days }} -extfile openssl-ca.ext
  args:
    chdir: "{{ openvpn_server_key_dir }}"
    creates: ca.crt
  when: openvpn_server_ca_key is not defined
  tags:
    - openvpn
    - openvpn.ca.key
    - openvpn.ca.server
    - openvpn.ca.server.sign
    - openvpn.ca.server.sign.key

- name: Generate server key if not exist before
  command: /usr/bin/openssl req -nodes -newkey rsa:{{ openvpn_server_rsa_bits }} -keyout server.key -out server.csr -days {{ openvpn_server_key_days }} -subj /CN=OpenVPN-Server-{{ openvpn_server_hostname }}/
  args:
    chdir: "{{ openvpn_server_key_dir }}"
    creates: server.key
  tags:
    - openvpn
    - openvpn.server.key
    - openvpn.server.generate
    - openvpn.server.generate.key

- name: Protect server key
  file:
    path: "{{ openvpn_server_key_dir }}/server.key"
    mode: 0400
  tags:
    - openvpn
    - openvpn.server.key
    - openvpn.server.protect
    - openvpn.server.protect.key

- name: Sign server key
  command: /usr/bin/openssl x509 -req -in server.csr -out server.crt -CA ca.crt -CAkey ca-key.pem -sha256 -days {{ openvpn_server_key_days }} -CAcreateserial -extfile openssl-server.ext
  args:
    chdir: "{{ openvpn_server_key_dir }}"
    creates: server.crt
  tags:
    - openvpn
    - openvpn.server.key
    - openvpn.server.sign
    - openvpn.server.sign.key

- name: Generate dh params
  command: /usr/bin/openssl dhparam -out {{ openvpn_server_key_dir }}/dh.pem {{ openvpn_server_rsa_bits }}
  args:
    chdir: "{{ openvpn_server_key_dir }}"
    creates: dh.pem
  tags:
    - openvpn
    - openvpn.dh
    - openvpn.dh.generate

- name: Install ca.conf config file
  template:
    src: ca.conf.j2
    dest: "{{ openvpn_server_key_dir }}/ca.conf"
    owner: "{{ openvpn_server_script_owner }}"
    group: "{{ openvpn_server_script_group }}"
    mode: 744
  tags:
    - openvpn
    - openvpn.ca
    - openvpn.ca.install
    - openvpn.ca.install.cfg

- name: Create initial certificate revocation list squence number
  shell: "echo 00 > crl_number"
  args:
    chdir: "{{ openvpn_server_key_dir }}"
    creates: crl_number
  tags:
    - openvpn
    - openvpn.revocation.init
    - openvpn.revocation.init.seq

- name: Install revocation script
  template:
    src: revoke.sh.j2
    dest: "{{ openvpn_server_key_dir }}/revoke.sh"
    owner: "{{ openvpn_server_script_owner }}"
    group: "{{ openvpn_server_script_group }}"
    mode: 744
  tags:
    - openvpn
    - openvpn.revocation.init
    - openvpn.revocation.init.script

- name: Check if certificate revocation list database exists
  stat:
    path: "{{ openvpn_server_key_dir }}/index.txt"
  register: revocationdb
  tags:
    - openvpn
    - openvpn.revocation.db
    - openvpn.revocation.init

- name: Create certificate revocation list database if required
  file:
    path: "{{ openvpn_server_key_dir }}/index.txt"
    state: touch
  when: revocationdb.stat.exists == False
  tags:
    - openvpn
    - openvpn.revocation.init
    - openvpn.revocation.create
    - openvpn.revocation.create.db

- name: Set up certificate revocation list
  command: /bin/sh revoke.sh
  args:
    chdir: "{{ openvpn_server_key_dir }}"
    creates: "{{ openvpn_server_key_dir }}/ca-crl.pem"
  tags:
    - openvpn
    - openvpn.revocation.init
    - openvpn.revocation.setup
    - openvpn.revocation.setup.list

- name: Install crl-cron script
  template:
    src: crl-cron.sh.j2
    dest: "{{ openvpn_server_key_dir }}/crl-cron.sh"
    owner: "{{ openvpn_server_script_owner }}"
    group: "{{ openvpn_server_script_group }}"
    mode: 744
  tags:
    - openvpn
    - openvpn.crl
    - openvpn.crl.script

- name: Add cron to check every Saturday if the CRL needs to be renewed
  cron:
    name: "Check if CRL will expire soon"
    special_time: weekly
    job: "sh {{ openvpn_server_key_dir }}/crl-cron.sh"
  tags:
    - openvpn
    - openvpn.crl
    - openvpn.crl.cron

- name: Create OpenVPN server config file
  template:
    src: server.conf.j2
    dest: "{{ openvpn_server_base_dir }}/{{ openvpn_server_config_file }}.conf"
    owner: "{{ openvpn_server_script_owner }}"
    group: "{{ openvpn_server_script_group }}"
  notify:
    - restart openvpn
  tags:
    - openvpn
    - openvpn.config
    - openvpn.config.server
    - openvpn.config.server.init

- name: Create OpenVPN scripts TAP up
  template:
    src: bridge-start.j2
    dest: "{{ openvpn_server_base_dir }}/server/bridge-start.sh"
    owner: "{{ openvpn_server_script_owner }}"
    group: "{{ openvpn_server_script_group }}"
    mode: 755
  when: openvpn_server_tap_mode and not openvpn_server_tun_mode
  notify:
    - restart openvpn
  tags:
    - openvpn
    - openvpn.config
    - openvpn.config.server
    - openvpn.config.server.init
    - openvpn.config.server.script.bridge
    - openvpn.config.server.script.tap.up

- name: Create OpenVPN scripts TAP down
  template:
    src: bridge-stop.j2
    dest: "{{ openvpn_server_base_dir }}/server/bridge-stop.sh"
    owner: "{{ openvpn_server_script_owner }}"
    group: "{{ openvpn_server_script_group }}"
    mode: 755
  when: openvpn_server_tap_mode and not openvpn_server_tun_mode
  notify:
    - restart openvpn
  tags:
    - openvpn
    - openvpn.config
    - openvpn.config.server
    - openvpn.config.server.init
    - openvpn.config.server.script.bridge
    - openvpn.config.server.script.tap.stop

########## Client certificates ##############

- name: Copy openssl client extensions
  copy:
    src: openssl-client.ext
    dest: "{{ openvpn_server_key_dir }}"
    owner: "{{ openvpn_server_script_owner }}"
    group: "{{ openvpn_server_script_group }}"
    mode: 0400
  tags:
    - openvpn
    - openvpn.client
    - openvpn.client.ext
    - openvpn.client.ext.copy

- name: Generate client key
  command: "/usr/bin/openssl req -nodes -newkey rsa:{{ openvpn_server_rsa_bits }} -keyout {{ item }}.key -out {{ item }}.csr -days {{ openvpn_server_key_days }}  -subj /CN=OpenVPN-Client-{{ openvpn_server_hostname }}-{{ item }}/"
  args:
    chdir: "{{ openvpn_server_key_dir }}"
    creates: "{{ item }}.key"
  with_items: "{{ openvpn_server_clients }}"
  tags:
    - openvpn
    - openvpn.client
    - openvpn.client.generate
    - openvpn.client.generate.key

- name: Protect client keys
  file:
    path: "{{ openvpn_server_key_dir }}/{{ item }}.key"
    mode: 0400
  with_items: "{{ openvpn_server_clients }}"
  tags:
    - openvpn
    - openvpn.client
    - openvpn.client.protect
    - openvpn.client.protect.key

- name: Sign client key
  command: /usr/bin/openssl x509 -req -in {{ item }}.csr -out {{ item }}.crt -CA ca.crt -CAkey ca-key.pem -sha256 -days {{ openvpn_server_key_days }} -extfile openssl-client.ext
  args:
    chdir: "{{ openvpn_server_key_dir }}"
    creates: "{{ item }}.crt"
  with_items: "{{ openvpn_server_clients }}"
  tags:
    - openvpn
    - openvpn.client
    - openvpn.client.sign
    - openvpn.client.sign.key

- name: Register server CA key
  slurp:
    src: "{{ openvpn_server_key_dir }}/ca.crt"
  register: openvpn_server_ca_cert
  tags:
    - openvpn
    - openvpn.ca.key
    - openvpn.ca.server
    - openvpn.ca.server.register
    - openvpn.ca.server.register.key

- name: Register client certs
  slurp:
    src: "{{ openvpn_server_key_dir }}/{{ item }}.crt"
  with_items: "{{ openvpn_server_clients }}"
  register: openvpn_server_client_certs
  tags:
    - openvpn
    - openvpn.client
    - openvpn.client.register
    - openvpn.client.register.crt

- name: Register client keys
  slurp:
    src: "{{ openvpn_server_key_dir }}/{{ item }}.key"
  with_items: "{{ openvpn_server_clients }}"
  register: openvpn_server_client_keys
  tags:
    - openvpn
    - openvpn.client
    - openvpn.client.register
    - openvpn.client.register.key

- name: Generate client config
  template:
    src: client.ovpn.j2
    dest: "{{ openvpn_server_base_dir }}/client/{{ item.0.item }}-{{ openvpn_server_hostname }}.ovpn"
    owner: "{{ openvpn_server_script_owner }}"
    group: "{{ openvpn_server_script_group }}"
    mode: 0400
  with_together:
    - "{{ openvpn_server_client_certs.results }}"
    - "{{ openvpn_server_client_keys.results }}"
  tags:
    - openvpn
    - openvpn.client
    - openvpn.client.config
    - openvpn.client.config.generate

############### Revoke client crt, config ###############
- name: Remove client config
  file:
    path: "{{ openvpn_server_base_dir }}/client/{{item}}-{{ openvpn_server_hostname }}.ovpn"
    state: absent
    force: yes
  with_items: '{{ openvpn_revoke_these_certs }}'
  tags:
    - openvpn
    - openvpn.revoke.client
    - openvpn.revoke.client.config

- name: Revoke certificates
  command: sh revoke.sh {{ item }}.crt
  args:
    chdir: "{{ openvpn_server_key_dir }}"
  with_items: '{{ openvpn_revoke_these_certs }}'
  tags:
    - openvpn
    - openvpn.revoke.client
    - openvpn.revoke.client.crt

- name: Remove client key
  file:
    path: "{{ openvpn_server_key_dir }}/{{ item }}.key"
    state: absent
    force: yes
  with_items: '{{ openvpn_revoke_these_certs }}'
  tags:
    - openvpn
    - openvpn.revoke.client
    - openvpn.revoke.client.key

- name: Remove client csr
  file:
    path: "{{ openvpn_server_key_dir }}/{{ item }}.csr"
    state: absent
    force: yes
  with_items: '{{ openvpn_revoke_these_certs }}'
  tags:
    - openvpn
    - openvpn.revoke.client
    - openvpn.revoke.client.csr
#########################################################