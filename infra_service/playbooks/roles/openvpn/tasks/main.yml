---
# tasks file for playbooks/roles/openvpn

- name: Ensure group 'nogroup' is present
  group:
    name: "{{ openvpn_server_service_group }}"
    state: present
    system: yes
  tags:
    - openvpn
    - openvpn.server.nogroup

- name: Enable ipv4 forwarding
  sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    ignoreerrors: yes
  when: openvpn_server_systemctl_ipv4_forvarding_enabled
  tags:
    - openvpn
    - openvpn.server.enable_ipv4.forwarding

- name: Install epel-release
  yum:
    name: epel-release
    state: present
  when: ansible_distribution == "CentOS" or ansible_distribution=="RedHat"
  tags:
    - openvpn
    - openvpn.epel.release.install

- name: Install base packages
  yum:
    state: present
    name:
      - git
      - vim
      - openssl
      - easy-rsa
      - telnet
      - wget
      - unzip
  tags:
    - openvpn
    - openvpn.install.defaul.packages

- name: Install openvpn server
  yum:
    name: openvpn
    state: latest
    enablerepo: epel
  tags:
    - openvpn
    - openvpn.server.install

- name: Create openvpn key directory
  file:
    path: "{{ openvpn_server_key_dir }}"
    state: directory
  tags:
    - openvpn
    - openvpn.server.key.dir

- name: Copy openssl server/ca extensions
  copy:
    src: "{{ item }}"
    dest: "{{ openvpn_server_key_dir }}"
    owner: root
    group: root
    mode: 0400
  with_items:
    - openssl-ca.ext
    - openssl-server.ext
  tags:
    - openvpn
    - openvpn.server.key.ca.ext.copy
    - openvpn.server.key.server.copy

- name: Copy CA key if exist
  copy:
    content: "{{ openvpn_server_ca_key.key }}"
    dest: "{{ openvpn_server_key_dir }}/ca-key.pem"
    mode: 0400
  when: openvpn_server_ca_key is defined
  tags:
    - openvpn

- name: Copy CA cert if exist
  copy:
    content: "{{ openvpn_server_ca_key.crt }}"
    dest: "{{ openvpn_server_key_dir }}/ca.crt"
    mode: 0444
  when: openvpn_server_ca_key is defined
  tags:
    - openvpn

- name: Generate CA key
  command: /usr/bin/openssl req -nodes -newkey rsa:{{ openvpn_server_rsa_bits }} -keyout ca-key.pem -out ca-csr.pem -days {{ openvpn_server_key_days }} -subj /CN=OpenVPN-CA-{{inventory_hostname[:53]}}/
  args:
    chdir: "{{ openvpn_server_key_dir }}"
    creates: ca-key.pem
  when: openvpn_ca_key is not defined

- name: Protect CA key if exist
  file:
    path: "{{ openvpn_server_key_dir }}/ca-key.pem"
    mode: 0400
  when: openvpn_server_ca_key is not defined
  tags:
    - openvpn

- name: Sign CA key if not exist before
  command: /usr/bin/openssl x509 -req -in ca-csr.pem -out ca.crt -CAcreateserial -signkey ca-key.pem -sha256 -days {{ openvpn_server_key_days }} -extfile openssl-ca.ext
  args:
    chdir: "{{ openvpn_server_key_dir }}"
    creates: ca.crt
  when: openvpn_server_ca_key is not defined
  tags:
    - openvpn

- name: Generate server key if not exist before
  command: /usr/bin/openssl req -nodes -newkey rsa:{{ openvpn_server_rsa_bits }} -keyout server.key -out server.csr -days {{ openvpn_server_key_days }} -subj /CN=OpenVPN-Server-Broker-UA/
  args:
    chdir: "{{ openvpn_server_key_dir }}"
    creates: server.key
  tags:
    - openvpn

- name: Protect server key
  file:
    path: "{{ openvpn_server_key_dir }}/server.key"
    mode: 0400
  tags:
    - openvpn

- name: Sign server key
  command: /usr/bin/openssl x509 -req -in server.csr -out server.crt -CA ca.crt -CAkey ca-key.pem -sha256 -days {{ openvpn_server_key_days }} -CAcreateserial -extfile openssl-server.ext
  args:
    chdir: "{{ openvpn_server_key_dir }}"
    creates: server.crt
  tags:
    - openvpn

- name: Generate dh params
  command: /usr/bin/openssl dhparam -out {{ openvpn_server_key_dir }}/dh.pem {{ openvpn_server_rsa_bits }}
  args:
    chdir: "{{ openvpn_server_key_dir }}"
    creates: dh.pem
  tags:
    - openvpn

- name: Install ca.conf config file
  template:
    src: ca.conf.j2
    dest: "{{ openvpn_server_key_dir }}/ca.conf"
    owner: root
    group: root
    mode: 744
  tags:
    - openvpn

- name: Create initial certificate revocation list squence number
  shell: "echo 00 > crl_number"
  args:
    chdir: "{{ openvpn_server_key_dir }}"
    creates: crl_number
  tags:
    - openvpn

- name: Install revocation script
  template:
    src: revoke.sh.j2
    dest: "{{ openvpn_server_key_dir }}/revoke.sh"
    owner: root
    group: root
    mode: 744
  tags:
    - openvpn

- name: Check if certificate revocation list database exists
  stat:
    path: "{{ openvpn_server_key_dir }}/index.txt"
  register: revocationdb
  tags:
    - openvpn

- name: Create certificate revocation list database if required
  file:
    path: "{{ openvpn_server_key_dir }}/index.txt"
    state: touch
  when: revocationdb.stat.exists == False
  tags:
    - openvpn

- name: Set up certificate revocation list
  command: /bin/sh revoke.sh
  args:
    chdir: "{{ openvpn_server_key_dir }}"
    creates: "{{ openvpn_server_key_dir }}/ca-crl.pem"
  tags:
    - openvpn

- name: Install crl-cron script
  template:
    src: crl-cron.sh.j2
    dest: "{{ openvpn_server_key_dir }}/crl-cron.sh"
    owner: root
    group: root
    mode: 744
  tags:
    - openvpn

- name: Add cron to check every Saturday if the CRL needs to be renewed
  cron:
    name: "Check if CRL will expire soon"
    special_time: weekly
    job: "sh {{ openvpn_server_key_dir }}/crl-cron.sh"
  tags:
    - openvpn

- name: Ensure that the WAN IP of your router is define
  assert:
    that:
      - '"{{ openvpn_server_wan_ip }}" is defined or "{{ openvpn_server_lan_ip }}" is defined'
    fail_msg: "You should define WAN IP address of your router, by default used LAN IP <<< !!!"
    success_msg: 'Your WAN IP {{ openvpn_server_wan_ip }} is defined, all good !!! >>>'

- name: Ensure that the NAT port forwarding is enabled for this custom port
  assert:
    that:
      - '"{{ openvpn_server_custom_port }}" is defined'
    fail_msg: "You should define custom port and enable NAT port forwarding, by default will be used default port <<< !!!"
    success_msg: 'Your cutom PORT {{ openvpn_server_custom_port }} is defined, all good !!! >>>'

- name: Create openvpn config file
  template:
    src: server.conf.j2
    dest: "{{ openvpn_server_base_dir }}/{{ openvpn_server_config_file }}.conf"
    owner: root
    group: root
  notify:
    - restart openvpn
  tags:
    - openvpn

########## Client certificates ##############

- name: Copy openssl client extensions
  copy:
    src: openssl-client.ext
    dest: "{{ openvpn_server_key_dir }}"
    owner: root
    group: root
    mode: 0400
  tags:
    - openvpn

- name: Generate client key
  command: "/usr/bin/openssl req -nodes -newkey rsa:{{ openvpn_server_rsa_bits }} -keyout {{ item }}.key -out {{ item }}.csr -days {{ openvpn_server_key_days }}  -subj /CN=OpenVPN-Client-{{ inventory_hostname[:24] }}-{{ item[:24] }}/"
  args:
    chdir: "{{ openvpn_server_key_dir }}"
    creates: "{{ item }}.key"
  with_items: "{{ openvpn_server_clients }}"
  tags:
    - openvpn

- name: Protect client keys
  file:
    path: "{{ openvpn_server_key_dir }}/{{ item }}.key"
    mode: 0400
  with_items: "{{ openvpn_server_clients }}"
  tags:
    - openvpn

- name: Sign client key
  command: /usr/bin/openssl x509 -req -in {{ item }}.csr -out {{ item }}.crt -CA ca.crt -CAkey ca-key.pem -sha256 -days {{ openvpn_server_key_days }} -extfile openssl-client.ext
  args:
    chdir: "{{ openvpn_server_key_dir }}"
    creates: "{{ item }}.crt"
  with_items: "{{ openvpn_server_clients }}"
  tags:
    - openvpn

- name: Register server ca key
  slurp:
    src: "{{ openvpn_server_key_dir }}/ca.crt"
  register: openvpn_server_ca_cert
  tags:
    - openvpn

- name: Register client certs
  slurp:
    src: "{{ openvpn_server_key_dir }}/{{ item }}.crt"
  with_items: "{{ openvpn_server_clients }}"
  register: openvpn_server_client_certs
  tags:
    - openvpn

- name: Register client keys
  slurp:
    src: "{{ openvpn_server_key_dir }}/{{ item }}.key"
  with_items: "{{ openvpn_server_clients }}"
  register: openvpn_server_client_keys
  tags:
    - openvpn

- name: Generate client config
  template:
    src: client.ovpn.j2
    dest: "{{ openvpn_server_base_dir }}/{{ item.0.item }}-{{ inventory_hostname }}.ovpn"
    owner: root
    group: root
    mode: 0400
  with_together:
    - "{{ openvpn_server_client_certs.results }}"
    - "{{ openvpn_server_client_keys.results }}"
  tags:
    - openvpn
